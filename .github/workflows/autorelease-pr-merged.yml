# from https://github.com/release-flow/keep-a-changelog-action/blob/v3.0.0/.github/workflows/pr-merged.yml
# this workflow creates a draft release, it is ALMOST a duplicate of the 'release-drafter' job in the 'release-manager' workflow
name: '[autorelease] PR merged'
run-name: '[autorelease] PR merged'

on:
  pull_request:
    branches:
      - main
    types: [closed]

permissions:
  contents: write

jobs:
  merge:
    runs-on: ubuntu-latest
    if: |
      (github.event.pull_request.merged == true) && 
      contains(github.event.pull_request.labels.*.name, 'actions:autorelease') && 
      ${{ github.event.pull_request.head.ref =~ ^autorelease\/[A-Za-z0-9.+-]+$ }}
    steps:
      # https://github.com/actions/create-github-app-token
      - name: Creating a GitHub App Token from actions/create-github-app-token
        #uses: actions/create-github-app-token@v1
        uses: actions/create-github-app-token@f2acddfb5195534d487896a656232b016a682f3c
        id: app-token
        with:
          # required
          app-id: ${{ secrets.RW_ACTIONS_APP_ID }}
          private-key: ${{ secrets.RW_ACTIONS_APP_KEY }}

      - name: Checkout files from commit tree
        uses: actions/checkout@v4
        with:
          #ref: ${{ github.head_ref }}
          token: ${{ steps.app-token.outputs.token }}

      - name: Get release version
        id: get-release-version
        run: |
          # Head branch should be named autorelease/<version>
          if ! [[ "${{ github.event.pull_request.head.ref }}" =~ ^autorelease\/[A-Za-z0-9.+-]+$ ]]; then
            echo "::error::Invalid branch '${{ github.event.pull_request.head.ref }}'"
            exit 1
          fi
          VERSION=$(echo "${{ github.event.pull_request.head.ref }}" | awk -F/ '{print $2}')
          echo "VERSION=$VERSION"
  
          RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
          if [[ $VERSION =~ $RE ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
          else
            echo "::error::Version '$VERSION' is not in a valid format" && exit 1
          fi
  
          if [[ "$PRERELEASE" ]]; then pre=true; else pre=false; fi
  
          if [[ -f $GITHUB_OUTPUT ]]; then
            echo "release-version=$VERSION" >> $GITHUB_OUTPUT
            echo "is-prerelease=$pre" >> $GITHUB_OUTPUT
          else
            echo "::set-output name=release-version::$VERSION"
            echo "::set-output name=is-prerelease::$pre"
          fi

      - name: Print Labels from the PR
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pullRequest } = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const labels = pullRequest.labels.map(label => label.name);
            console.log('Labels:', labels.join(', '));

      - name: Print the version label from the PR
        id: get-version-label
        if: contains(github.event.pull_request.labels.*.name, 'version:')
        run: |
          ## Print the version label from the PR
          echo "The 'version:' label exists in the pull request."
          echo "now we need to find out how to grab that as a value... "
          ##
          echo "attempting to get the version label from the pull request with bash... "
          version_label=$(echo "${{ github.event.pull_request.labels.*.name }}" | grep -o 'version:[^,]*' | sed 's/version://')
          echo "version_label was set to ${version_label}"
          echo "going to output the version label"
          echo "version_label=${version_label}" >> $GITHUB_OUTPUT

      - name: Get PR commit SHA
        id: pr-commit
        run: |
          echo "getting the PR commit SHA"
          git rev-parse ${{ github.event.pull_request.head.sha }}
          pr-sha=$(git rev-parse ${{ github.event.pull_request.head.sha }})
          echo "the PR SHA is ${pr-sha}"
          echo "sha=${pr-sha}" >> $GITHUB_OUTPUT

      - name: Get main branch commit SHA
        id: main-commit
        run: |
          echo "getting the main commit SHA"
          git rev-parse ${{ github.event.pull_request.base.sha }}
          main-sha=$(git rev-parse ${{ github.event.pull_request.base.sha }})
          echo "the main SHA is ${main-sha}"
          echo "sha=${main-sha}" >> $GITHUB_OUTPUT

      - name: Compare SHAs
        run: |
          echo "PR commit SHA: ${{ steps.pr-commit.outputs.sha }}"
          echo "Main branch commit SHA: ${{ steps.main-commit.outputs.sha }}"

      - name: Get repo version information
        id: repo-version-info
        uses: rwaight/actions/git/repo-version-info@main
        with:
          #gh-token: ${{ secrets.GITHUB_TOKEN }}
          gh-token: ${{ steps.app-token.outputs.token }}

      - name: Print repo version information
        id: print-repo-info
        if: |
          ${{ steps.repo-version-info.outputs.latest-tag }} || 
          ${{ steps.repo-version-info.outputs.latest-release }}
        run: |
          ## Print repo version information
          echo "Here is the info from the repo-version-info step: "
          echo "- latest release: ${{ steps.repo-version-info.outputs.latest-release }}"
          echo "- latest tag: ${{ steps.repo-version-info.outputs.latest-tag }}"
          ##

      - name: Print notes
        id: print-notes
        run: |
          ## Print notes
          echo "Here are some notes about what could be next... "
          echo "maybe use the label from the merged PR to determine the 'default_bump' setting to use with 'github-tag-action' ... "
          echo "then we wont have to use the 'custom_tag' option?  "
          echo "see https://github.com/mathieudutour/github-tag-action/blob/master/action.yml "
          ##

      - name: github-tag-action | dry run to push tag
        id: github-tag-action
        uses: mathieudutour/github-tag-action@v6.2
        continue-on-error: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          #github_token: ${{ steps.app-token.outputs.token }}
          custom_tag: ${{ steps.get-release-version.outputs.release-version }}
          commit_sha: ${{ steps.main-commit.outputs.sha }}
          #default_bump: ${{ steps.get-version-label.outputs.version_label }}
          dry_run: true

      - name: github-tag-action | Print outputs
        if: ${{ steps.github-tag-action.outputs.new_tag }}
        run: |
          ## Report the output from the github-tag-action step
          echo "The output from the 'github-tag-action' step was: "
          echo "- new tag         : ${{ env.new_tag }} "
          echo "- new version     : ${{ env.new_version }} "
          echo "- previous tag    : ${{ env.previous_tag }} "
          echo "- previous version: ${{ env.previous_version }} "
          echo "- release type    : ${{ env.release_type }} "
          echo "- changelog: "
          echo "${{ env.changelog }}"
          echo " === end of changelog === "
          ##
          echo "### Output from the \`github-tag-action\` step" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "- new tag         : ${{ env.new_tag }} " >> $GITHUB_STEP_SUMMARY
          echo "- new version     : ${{ env.new_version }} " >> $GITHUB_STEP_SUMMARY
          echo "- previous tag    : ${{ env.previous_tag }} " >> $GITHUB_STEP_SUMMARY
          echo "- previous version: ${{ env.previous_version }} " >> $GITHUB_STEP_SUMMARY
          echo "- release type    : ${{ env.release_type }} " >> $GITHUB_STEP_SUMMARY
          echo "- changelog: see the 'github-tag-action print outputs step' " >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
        env:
          new_tag: ${{ steps.github-tag-action.outputs.new_tag }}
          new_version: ${{ steps.github-tag-action.outputs.new_version }}
          previous_tag: ${{ steps.github-tag-action.outputs.previous_tag }}
          previous_version: ${{ steps.github-tag-action.outputs.previous_version }}
          release_type: ${{ steps.github-tag-action.outputs.release_type }}
          changelog: ${{ steps.github-tag-action.outputs.changelog }}

      # user: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>'
      # user: 'rw-actions-bot <noreply@github.com>'
      - name: Set up git config
        id: set-up-git
        run: |
          ## Run 'git --version' then 'git config'
          git --version
          ## Configure git to login as the RW Actions Bot.
          git config user.name rw-actions-bot[bot]
          git config user.email ${{ secrets.RW_ACTIONS_BOT_UID }}+rw-actions-bot[bot]@users.noreply.github.com
          echo "the 'set-up-git' step has completed. "

      - name: Create the ${{ steps.get-release-version.outputs.release-version }} tag
        continue-on-error: true
        run: |
          echo "Creating the '${{ env.release-version }}' tag"
          echo "Will sign the tag maybe?"
          git tag -a ${{ env.release-version }} -m "Code updated to ${{ env.release-version }}" -s ${{ steps.main-commit.outputs.sha }}
        env:
          release-version: ${{ steps.get-release-version.outputs.release-version }}

      - name: keep-a-changelog-action | Get release notes
        id: keep-a-changelog-action
        #uses: ./
        #uses: release-flow/keep-a-changelog-action@v3
        uses: release-flow/keep-a-changelog-action@74931dec7ecdbfc8e38ac9ae7e8dd84c08db2f32
        continue-on-error: true
        with:
          command: query
          version: ${{ steps.get-release-version.outputs.release-version }}

      - name: keep-a-changelog-action | Display release notes
        if: ${{ steps.keep-a-changelog-action.outputs.release-notes }}
        run: |
          echo "${{ steps.keep-a-changelog-action.outputs.release-notes }}"

      # Drafts your next Release notes as Pull Requests are merged into the default branch (i.e., "main")
      - name: Run rwaight/actions/releases/release-drafter
        #uses: rwaight/actions/releases/release-drafter@v1
        uses: rwaight/actions/releases/release-drafter@main
        id: draft-release
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        with:
          config-name: release-template_monorepo-test-actions.yml # located in .github/ in default branch
          version: ${{ steps.get-release-version.outputs.release-version }}
          #prerelease-identifier: ${{ inputs.preid }}
          prerelease: ${{ steps.get-release-version.outputs.is-prerelease }}
          # https://github.com/release-drafter/release-drafter/pull/1302
          #include-pre-releases: ${{ steps.get-release-version.outputs.is-prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ##GITHUB_TOKEN: ${{ secrets.MY_ACTIONS_TOKEN }}

      - name: Note about this workflow
        run: |
          echo "Here is where we should actually pass the notes to release-drafter instead of the next step"
          echo "Unless we do not want to use release-drafter... "

      - name: Create Draft Release
        id: create_release
        #uses: release-flow/.github/actions/release/create@v1
        uses: release-flow/.github/actions/release/create@6302ee193aa3adb9d83f1ba00b16b4cbe897bf0c
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          tag-name: 'v${{ steps.get-release-version.outputs.release-version }}'
          release-name: 'Release ${{ steps.get-release-version.outputs.release-version }}'
          draft: true
          prerelease: ${{ steps.get-release-version.outputs.is-prerelease}}
          body: ${{ steps.get-release-notes.outputs.release-notes }}

      - name: Display Instructions
        run: |
          echo "::notice title=Draft Release Prepared::A draft release has been prepared for you to approve: ${{ steps.create_release.outputs.html-url }}"
