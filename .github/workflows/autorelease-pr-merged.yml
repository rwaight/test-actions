# from https://github.com/release-flow/keep-a-changelog-action/blob/v3.0.0/.github/workflows/pr-merged.yml
# this workflow creates a draft release, it is ALMOST a duplicate of the 'release-drafter' job in the 'release-manager' workflow
name: '[autorelease] PR merged'
run-name: '[autorelease] PR merged'

on:
  pull_request:
    branches:
      - main
    types: [closed]

permissions:
  contents: write

jobs:
  merge:
    runs-on: ubuntu-latest
    if: |
      (github.event.pull_request.merged == true) && 
      contains(github.event.pull_request.labels.*.name, 'actions:autorelease') && 
      ${{ github.event.pull_request.head.ref =~ ^autorelease\/[A-Za-z0-9.+-]+$ }}
    steps:
      - name: Checkout files from commit tree
        uses: actions/checkout@v4

      - name: Get release version
        id: get-release-version
        run: |
          # Head branch should be named autorelease/<version>
          if ! [[ "${{ github.event.pull_request.head.ref }}" =~ ^autorelease\/[A-Za-z0-9.+-]+$ ]]; then
            echo "::error::Invalid branch '${{ github.event.pull_request.head.ref }}'"
            exit 1
          fi
          VERSION=$(echo "${{ github.event.pull_request.head.ref }}" | awk -F/ '{print $2}')
          echo "VERSION=$VERSION"
  
          RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
          if [[ $VERSION =~ $RE ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
          else
            echo "::error::Version '$VERSION' is not in a valid format" && exit 1
          fi
  
          if [[ "$PRERELEASE" ]]; then pre=true; else pre=false; fi
  
          if [[ -f $GITHUB_OUTPUT ]]; then
            echo "release-version=$VERSION" >> $GITHUB_OUTPUT
            echo "is-prerelease=$pre" >> $GITHUB_OUTPUT
          else
            echo "::set-output name=release-version::$VERSION"
            echo "::set-output name=is-prerelease::$pre"
          fi

      - name: keep-a-changelog-action | Get release notes
        id: keep-a-changelog-action
        #uses: ./
        #uses: release-flow/keep-a-changelog-action@v3
        uses: release-flow/keep-a-changelog-action@74931dec7ecdbfc8e38ac9ae7e8dd84c08db2f32
        with:
          command: query
          version: ${{ steps.get-release-version.outputs.release-version }}

      - name: keep-a-changelog-action | Display release notes
        run: |
          echo "${{ steps.keep-a-changelog-action.outputs.release-notes }}"

      # Drafts your next Release notes as Pull Requests are merged into the default branch (i.e., "main")
      - name: Run rwaight/actions/releases/release-drafter
        #uses: rwaight/actions/releases/release-drafter@v1
        uses: rwaight/actions/releases/release-drafter@main
        id: draft-release
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        with:
          config-name: release-template_monorepo-test-actions.yml # located in .github/ in default branch
          version: ${{ steps.get-release-version.outputs.release-version }}
          #prerelease-identifier: ${{ inputs.preid }}
          prerelease: ${{ steps.get-release-version.outputs.is-prerelease }}
          # https://github.com/release-drafter/release-drafter/pull/1302
          #include-pre-releases: ${{ steps.get-release-version.outputs.is-prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ##GITHUB_TOKEN: ${{ secrets.MY_ACTIONS_TOKEN }}

      - name: Note about this workflow
        run: |
          echo "Here is where we should actually pass the notes to release-drafter instead of the next step"
          echo "Unless we do not want to use release-drafter... "

      - name: Create Draft Release
        id: create_release
        #uses: release-flow/.github/actions/release/create@v1
        uses: release-flow/.github/actions/release/create@6302ee193aa3adb9d83f1ba00b16b4cbe897bf0c
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          tag-name: 'v${{ steps.get-release-version.outputs.release-version }}'
          release-name: 'Release ${{ steps.get-release-version.outputs.release-version }}'
          draft: true
          prerelease: ${{ steps.get-release-version.outputs.is-prerelease}}
          body: ${{ steps.get-release-notes.outputs.release-notes }}

      - name: Display Instructions
        run: |
          echo "::notice title=Draft Release Prepared::A draft release has been prepared for you to approve: ${{ steps.create_release.outputs.html-url }}"
