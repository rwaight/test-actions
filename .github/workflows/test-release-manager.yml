# This workflow runs specific workflows based on condition and/or user input:
# 'Release Drafter' and 'Update Tags on Release'
# The 'prepare-release' workflow should be moved into this workflow
name: Test Release Manager
run-name: Run Release Manager on ${{ github.event_name }}
on:
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#release
  # push:  # 'on push' is used by: 'update-release-draft'
  #   branches: [main]
  pull_request:
    # 'on pull_request' is used by: 'update-release-draft' (closed)
    types: [closed]
    branches: [main]
  release:
    # 'on release' is used by: 'update-tags-on-release' (published)
    types: [published]
  # # Here is an example 'workflow_run' configuration
  # workflow_run:
  #   workflows: ["Prepare Version Bump"]
  #   types:
  #     - completed
  # 'on workflow_dispatch' is used conditionally by different jobs
  workflow_dispatch:
    inputs:
      update_changelog:
        description: 'Update changelog'
        required: true
        default: false
        type: boolean
      update_release_draft:
        description: 'Update release draft'
        required: true
        default: false
        type: boolean
      # # this 'release-type' input will be used in a separate job that will create a release PR or something
      # release-type:
      #   description: 'Release type'
      #   type: choice
      #   required: true
      #   #required: false
      #   options:
      #     - none
      #     - major
      #     - minor
      #     - patch
      #     #- premajor
      #     #- preminor
      #     #- prepatch
      #     - prerelease
      #   default: none
      debug_output:
        description: 'Debug output'
        required: true
        default: false
        type: boolean

jobs:
  # run 'update-release-draft', but only: manual (workflow_dispatch); or closed pull_request; 
  update-release-draft:
    name: Update release draft
    runs-on: ubuntu-latest
    if: | 
      (github.event_name=='workflow_dispatch' && inputs.update_release_draft==true) ||
      (github.event_name=='workflow_dispatch' && inputs.update_changelog==true) ||
      (github.event.pull_request.merged == true)
    # previously, when including 'push' to 'main' caused two release drafts to be created
    #    #(github.event_name=='push' && github.ref == 'refs/heads/main')
    env:
      MY_WORKFLOW_DEBUG: ${{ inputs.debug_output || 'false' }}
    outputs:
      id: ${{ steps.draft-release.outputs.id }}
      name: ${{ steps.draft-release.outputs.name }}
      tag_name: ${{ steps.draft-release.outputs.tag_name }}
      html_url: ${{ steps.draft-release.outputs.html_url }}
      upload_url: ${{ steps.draft-release.outputs.upload_url }}
      major_version: ${{ steps.draft-release.outputs.major_version }}
      minor_version: ${{ steps.draft-release.outputs.minor_version }}
      patch_version: ${{ steps.draft-release.outputs.patch_version }}
      resolved_version: ${{ steps.draft-release.outputs.resolved_version }}
      body: ${{ steps.draft-release.outputs.body }}
    steps:
      - name: Exit workflow in forked repo
        id: check-repo-owner
        if: (github.repository_owner != 'rwaight')
        run: |
          echo "This workflow was run in a forked repo. Unless this file is updated, none of the jobs will run. "
          echo "This workflow will now exit. "
          exit 0

      - name: Checkout files from commit tree
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
          fetch-tags: 'true'

      - name: Get the current value of my_custom_version
        id: get-my-custom-version
        run: |
          echo "starting the 'get-my-custom-version' step "
          MY_CUSTOM_VERSION=$(jq --raw-output .my_custom_version my-custom-variables.json)
          echo "MY_CUSTOM_VERSION: $MY_CUSTOM_VERSION"
          echo "MY_CUSTOM_VERSION=$MY_CUSTOM_VERSION" >> $GITHUB_ENV
          echo "MY_CUSTOM_VERSION=$MY_CUSTOM_VERSION" >> "$GITHUB_OUTPUT"
          echo "completing the 'get-my-custom-version' step "

      # https://github.com/actions/create-github-app-token
      - name: Creating a GitHub App Token from actions/create-github-app-token
        #uses: actions/create-github-app-token@v1
        uses: actions/create-github-app-token@f2acddfb5195534d487896a656232b016a682f3c
        id: app-token
        with:
          # required
          app-id: ${{ secrets.RW_ACTIONS_APP_ID }}
          private-key: ${{ secrets.RW_ACTIONS_APP_KEY }}

      # maybe use https://github.com/EndBug/add-and-commit instead?
      # user: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>'
      # user: 'rw-actions-bot <noreply@github.com>'
      - name: Set up git config
        id: set-up-git
        run: |
          git --version
          git config user.name "rw-actions-bot"
          git config user.email "<noreply@github.com>"
          git status
          echo "the 'set-up-git' step has completed. "

      - name: Get the repo tags information with git
        id: print-repo-tags-with-git
        run: |
          echo "Using git to print tag information"
          echo "running 'git describe --tags' ... "
          git describe --tags
          echo ""
          echo "running 'git tag -l | tail -1' ... "
          git tag -l | tail -1
          echo ""
          echo "running 'git tag --sort=committerdate | grep -E '[0-9]' | tail -1 | cut -b 2-7' ... "
          echo "this will remove the 'v' prefix"
          git tag --sort=committerdate | grep -E '[0-9]' | tail -1 | cut -b 2-7
          echo ""
          echo "running 'git tag --sort=-taggerdate | tail -1' ... "
          git tag --sort=-taggerdate | tail -1
          echo ""
          echo "running 'git tag --sort=committerdate | grep -o 'v.*' | sort -r | head -1' ... "
          git tag --sort=committerdate | grep -o 'v.*' | sort -r | head -1
          echo ""
          echo "running 'git describe --tags \`git rev-list --tags --max-count=1\`' ... "
          git describe --tags `git rev-list --tags --max-count=1`
          echo ""
          echo "running 'git describe --abbrev=0 --tags' ... "
          git describe --abbrev=0 --tags
          echo ""
          echo "The 'print-repo-tags-with-git' step is complete."
        #env:
          #GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Get the repo release information with the GitHub CLI
        id: print-release-info-with-cli
        run: |
          echo "Using the GitHub CLI to print release information"
          echo "See https://cli.github.com/manual/gh_release_list for information about the command. "
          echo "running 'gh release list' ... "
          gh release list
          echo ""
          echo "running 'gh release list --exclude-drafts' ... "
          gh release list --exclude-drafts
          echo ""
          echo "running 'gh release list --exclude-drafts --exclude-pre-releases' ... "
          gh release list --exclude-drafts --exclude-pre-releases
          echo ""
          echo "running 'gh release list --exclude-drafts --exclude-pre-releases --limit 1' ... "
          gh release list --exclude-drafts --exclude-pre-releases --limit 1
          echo ""
          echo "To learn more about using the GitHub CLI with workflows... "
          echo "See https://docs.github.com/en/actions/using-workflows/using-github-cli-in-workflows "
          echo ""
          echo "running 'gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r \".[].tagName\"' ... "
          gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r ".[].tagName"
          echo ""
          latest_release=$(gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r ".[].tagName")
          echo "The latest release version of this repo is \`$latest_release\`"
          echo "The latest release version of this repo is \`$latest_release\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo ""
          echo "The 'print-release-info-with-cli' step is complete."
        env:
          #GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      # Drafts your next Release notes as Pull Requests are merged into the default branch (i.e., "main")
      - name: Run rwaight/actions/releases/release-drafter
        #uses: rwaight/actions/releases/release-drafter@v1
        uses: rwaight/actions/releases/release-drafter@main
        id: draft-release
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        with:
          config-name: release-template_monorepo-actions.yml # located in .github/ in default branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ##GITHUB_TOKEN: ${{ secrets.MY_ACTIONS_TOKEN }}

      - name: Provide output from release-drafter
        # Run this step if the 'id' output was set in the 'draft-release' step
        if: ${{ steps.draft-release.outputs.id }}
        id: print-release-drafter-outputs
        run: |
         echo "The release drafter step outputs are: "
         echo "id: ${{ steps.draft-release.outputs.id }}" 
         echo "name: ${{ steps.draft-release.outputs.name }}" 
         echo "tag_name: ${{ steps.draft-release.outputs.tag_name }}" 
         echo ""
         echo "URLs: "
         echo "html_url: ${{ steps.draft-release.outputs.html_url }}" 
         echo "upload_url: ${{ steps.draft-release.outputs.upload_url }}" 
         echo ""
         echo "Version Info: "
         echo "major_version: ${{ steps.draft-release.outputs.major_version }}" 
         echo "minor_version: ${{ steps.draft-release.outputs.minor_version }}" 
         echo "patch_version: ${{ steps.draft-release.outputs.patch_version }}" 
         echo "resolved_version: ${{ steps.draft-release.outputs.resolved_version }}" 
         echo ""
         echo "body: "
         echo "${{ steps.draft-release.outputs.body }}"
         echo " === end of body === "
         echo ""
         echo "The 'print-release-drafter-outputs' step is now complete. "


      - name: Print draft release instructions and information
        if: ${{ steps.draft-release.outputs.html_url }}
        id: print-draft-release
        run: |
          echo "::notice title=Draft Release Prepared::A draft release has been prepared for you to review: ${{ steps.draft-release.outputs.html_url }}"
          echo "### Draft release prepared" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "A draft release has been prepared for you to review. " >> $GITHUB_STEP_SUMMARY
          echo "- Draft release URL: ${{ steps.draft-release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "<details><summary> Draft release summary (click to expand) </summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "#### Release information " >> $GITHUB_STEP_SUMMARY
          echo "- ID: \`${{ steps.draft-release.outputs.id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Name: ${{ steps.draft-release.outputs.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tag Name: \`${{ steps.draft-release.outputs.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "#### URLs " >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "- Release URL: ${{ steps.draft-release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- Upload URL: ${{ steps.draft-release.outputs.upload_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "#### Version information " >> $GITHUB_STEP_SUMMARY
          echo "- Major version   : ${{ steps.draft-release.outputs.major_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Minor version   : ${{ steps.draft-release.outputs.minor_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Patch version   : ${{ steps.draft-release.outputs.patch_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Resolved version: ${{ steps.draft-release.outputs.resolved_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "</details>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line


      - name: Run workflow debug
        id: run-workflow-debug
        if: env.MY_WORKFLOW_DEBUG=='true'
        run: |
          echo "workflow debug was set to true... you should probably put something here for debug purposes. "
          echo ""
          echo "The GitHub event_name is: ${{ github.event_name }}"
          echo "The GitHub ref is: ${{ github.ref }}"
          echo "The GitHub ref_name is: ${{ github.ref_name }}"
          echo ""
          echo "For more information, see the GitHub Actions Contexts docs, which are located at: "
          echo "https://docs.github.com/en/actions/learn-github-actions/contexts#github-context"
          echo "The 'run-workflow-debug' step is now complete. "
        continue-on-error: true

  # run 'update-changelog', but only: manual (workflow_dispatch); or closed pull_request; 
  update-changelog:
    name: Update changelog
    runs-on: ubuntu-latest
    if: | 
      (github.repository_owner == 'rwaight') && ( 
      (github.event_name=='workflow_dispatch' && inputs.update_changelog==true) ||
      (github.event.pull_request.merged == true)
      ) && (${{ needs.update-release-draft.outputs.id }})
    # previously, when including 'push' to 'main' caused two release drafts to be created
    #    #(github.event_name=='push' && github.ref == 'refs/heads/main')
    needs: [update-release-draft]
    permissions:
      contents: read
      issues: write
      pull-requests: write
    env:
      MY_WORKFLOW_DEBUG: ${{ inputs.debug_output || 'false' }}
    steps:
      # https://github.com/actions/create-github-app-token
      - name: Creating a GitHub App Token from actions/create-github-app-token
        #uses: actions/create-github-app-token@v1
        uses: actions/create-github-app-token@f2acddfb5195534d487896a656232b016a682f3c
        id: app-token
        with:
          # required
          app-id: ${{ secrets.RW_ACTIONS_APP_ID }}
          private-key: ${{ secrets.RW_ACTIONS_APP_KEY }}

      - name: Checkout files from commit tree
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
          ref: ${{ github.head_ref }}
          token: ${{ steps.app-token.outputs.token }}

      # maybe use https://github.com/EndBug/add-and-commit instead?
      # user: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>'
      # user: 'rw-actions-bot <noreply@github.com>'
      - name: Set up git config
        id: set-up-git
        run: |
          git --version
          git config user.name "rw-actions-bot"
          git config user.email "<noreply@github.com>"
          git status
          echo "the 'set-up-git' step has completed. "

      - name: Print output from 'update-release-draft' job
        id: print-draft-release-outputs
        run: |
          echo "Draft release information: "
          echo "id: ${{ needs.update-release-draft.outputs.id }}" 
          echo "name: ${{ needs.update-release-draft.outputs.name }}" 
          echo "tag_name: ${{ needs.update-release-draft.outputs.tag_name }}" 
          echo ""
          echo "URLs: "
          echo "html_url: ${{ needs.update-release-draft.outputs.html_url }}" 
          echo "upload_url: ${{ needs.update-release-draft.outputs.upload_url }}" 
          echo ""
          echo "Version Info: "
          echo "major_version: ${{ needs.update-release-draft.outputs.major_version }}" 
          echo "minor_version: ${{ needs.update-release-draft.outputs.minor_version }}" 
          echo "patch_version: ${{ needs.update-release-draft.outputs.patch_version }}" 
          echo "resolved_version: ${{ needs.update-release-draft.outputs.resolved_version }}" 
          echo ""
          echo "body: "
          echo "${{ needs.update-release-draft.outputs.body }}"
          echo " === end of body === "
          echo ""
          echo "The 'print-release-drafter-outputs' step is now complete. "

      - name: 'Ensure actions:autorelease label exists'
        run: |
          LABEL=$(gh api repos/$GITHUB_REPOSITORY/labels --jq '.[] | select(.name=="actions:autorelease")')
          if [[ -z "$LABEL" ]]; then
            echo "Creating 'actions:autorelease' label"
            gh api --silent repos/$GITHUB_REPOSITORY/labels -f name="actions:autorelease" -f color="baa938" -f description="This is an automatically-created PR to trigger a release"
          else
            echo "the 'actions:autorelease' label exists"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/stefanzweifel/changelog-updater-action
      # from https://github.com/stefanzweifel/changelog-updater-action/blob/main/.github/workflows/update-changelog.yaml
      - name: Try 01 - Update changelog from release-drafter with stefanzweifel/changelog-updater-action
        id: try-01-update-changelog
        uses: stefanzweifel/changelog-updater-action@v1
        with:
          release-notes: ${{ needs.update-release-draft.outputs.body }}
          latest-version: ${{ needs.update-release-draft.outputs.resolved_version }}
          path-to-changelog: release-manager-try01-CHANGELOG.md

      - name: Try 01 - Show release-manager-try01-CHANGELOG content
        run: cat release-manager-try01-CHANGELOG.md

      # https://github.com/stefanzweifel/git-auto-commit-action
      # from https://github.com/stefanzweifel/changelog-updater-action/blob/main/.github/workflows/update-changelog.yaml
      - name: Try 01 - Commit updated CHANGELOG
        id: try-01-commit-changelog
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: 'autorelease/${{ needs.update-release-draft.outputs.resolved_version }}'
          commit_message: Update CHANGELOG for ${{ needs.update-release-draft.outputs.resolved_version }}
          file_pattern: release-manager-try01-CHANGELOG.md
          create_branch: true
          commit_options: '--signoff'
          commit_user_name: rw-actions-bot
          commit_user_email: noreply@github.com

      - name: Try 01 - File structure after stefanzweifel/git-auto-commit-action
        #if: env.MY_WORKFLOW_DEBUG=='true'
        run: ls -R

      # https://github.com/mikepenz/release-changelog-builder-action
      - name: Try 02 - Build a custom changelog with mikepenz/release-changelog-builder-action
        id: try-02-update-changelog
        uses: mikepenz/release-changelog-builder-action@v4
        env:
          # https://github.com/mikepenz/release-changelog-builder-action?tab=readme-ov-file#action-inputsoutputs
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          token: ${{ steps.app-token.outputs.token }}
          ignorePreReleases: "false"   # default is 'false'
          outputFile: release-manager-try02-CHANGELOG.md
          #fetchReleaseInformation: true   # default is 'false'
          # we may need to use 'fetchViaCommits', but looks like
          # we will also need to include the 'fromTag' and 'toTag' options

      - name: Try 02 - Show release-manager-try02-CHANGELOG content
        run: cat release-manager-try02-CHANGELOG.md

      # https://github.com/stefanzweifel/git-auto-commit-action
      # from https://github.com/stefanzweifel/changelog-updater-action/blob/main/.github/workflows/update-changelog.yaml
      - name: Try 02 - Commit updated CHANGELOG
        id: try-02-commit-changelog
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: 'autorelease/${{ needs.update-release-draft.outputs.resolved_version }}'
          commit_message: Update CHANGELOG for ${{ needs.update-release-draft.outputs.resolved_version }}
          file_pattern: release-manager-try02-CHANGELOG.md
          create_branch: true
          commit_options: '--signoff'
          commit_user_name: rw-actions-bot
          commit_user_email: noreply@github.com

      - name: Print notice that no pr is being created
        id: print-notice-no-pr
        run: |
          echo "::notice title=Release PR NOT Prepared::A release PR WAS NOT created, please review the output of the workflow"

  # run 'update-tags-on-release', but only when a release is published
  update-tags-on-release:
    name: Update major and minor tags on release
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.release-vars-output.outputs.RELEASE_VERSION }}
    if: | 
      (github.repository_owner == 'rwaight') &&
      (github.event_name=='release' && github.event.action=='published')
    env:
      MY_WORKFLOW_DEBUG: ${{ inputs.debug_output || 'false' }}
    steps:
      - name: Check-out the repository under GITHUB_WORKSPACE
        uses: actions/checkout@v4

      - name: Get release version
        id: get-release-version
        run: |
          VERSION="${{ github.event.release.tag_name }}"

          RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
          if [[ $VERSION =~ $RE ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
          else
            echo "::error::Version '$VERSION' is not in a valid format" && exit 1
          fi

          if [[ "$PRERELEASE" ]]; then pre=true; else pre=false; fi
          if [[ -f $GITHUB_OUTPUT ]]; then
            echo "major-ref=v$MAJOR" >> $GITHUB_OUTPUT
            echo "minor-ref=v$MINOR" >> $GITHUB_OUTPUT
            echo "is-prerelease=$pre" >> $GITHUB_OUTPUT
          else
            echo "::set-output name=major-ref::v$MAJOR"
            echo "::set-output name=minor-ref::v$MINOR"
            echo "::set-output name=is-prerelease::$pre"
          fi

      - name: Check output from get-release-version
        id: check-get-release-version
        env:
          MAJOR_REF: ${{ steps.get-release-version.outputs.major-ref }}
          MINOR_REF: ${{ steps.get-release-version.outputs.minor-ref }}
          RELEASE_VERSION: ${GITHUB_REF#refs/*/}
        run: |
          echo "## RELEASE_VERSION variables"
          echo ${{ env.RELEASE_VERSION }}
          echo $RELEASE_VERSION
          echo ${{ steps.release-vars-output.outputs.RELEASE_VERSION }}
          echo ""
          echo "## MY_REF variables"
          echo ${{ env.MY_REF }}
          echo $MY_REF
          echo ${{ steps.release-vars-output.outputs.MY_REF }}
          echo ""

      - name: Set MY_REF and RELEASE_VERSION environmental variable and output
        id: release-vars-output
        run: |
          echo "MY_REF=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "MY_REF=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Check output of MY_REF and RELEASE_VERSION
        env:
          MY_REF: ${{ steps.release-vars-output.outputs.MY_REF }}
          RELEASE_VERSION: ${{ steps.release-vars-output.outputs.RELEASE_VERSION }}
        run: |
          echo "## RELEASE_VERSION variables"
          echo ${{ env.RELEASE_VERSION }}
          echo $RELEASE_VERSION
          echo ${{ steps.release-vars-output.outputs.RELEASE_VERSION }}
          echo ""
          echo "## MY_REF variables"
          echo ${{ env.MY_REF }}
          echo $MY_REF
          echo ${{ steps.release-vars-output.outputs.MY_REF }}
          echo ""

      - name: This should run when there are tags pushed
        if: github.ref_type == 'tag'
        run: |
          echo "The ref_type is: ${{ github.ref_type }}"
          echo "The release.tag_name value is ${{ github.event.release.tag_name }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub ref_name: ${{ github.ref_name }}"
          echo "GitHub ref_type: ${{ github.ref_type }}"

      - name: This should run when a release is published
        if: ${{ github.event.release.tag_name }}
        run: |
          echo "The ref_type is: ${{ github.ref_type }}"
          echo "The release.tag_name value is ${{ github.event.release.tag_name }}"

      - name: Run workflow debug
        id: run-workflow-debug
        if: env.MY_WORKFLOW_DEBUG=='true'
        run: |
          echo "workflow debug was set to true... you should probably put something here for debug purposes. "
          echo ""
          echo "The GitHub event_name is: ${{ github.event_name }}"
          echo "The GitHub ref is: ${{ github.ref }}"
          echo "The GitHub ref_name is: ${{ github.ref_name }}"
          echo ""
          echo "For more information, see the GitHub Actions Contexts docs, which are located at: "
          echo "https://docs.github.com/en/actions/learn-github-actions/contexts#github-context"
          echo "The 'run-workflow-debug' step is now complete. "
        continue-on-error: true

      - name: Prerelease notice
        if: fromJSON(steps.get-release-version.outputs.is-prerelease)
        run: |
          echo "::notice::Pre-release version detected, not moving ref  ${{ steps.get-release-version.outputs.major-ref }}"

      - name: Update major and minor release tags for ${{ steps.release-vars-output.outputs.RELEASE_VERSION }}
        id: release-tag-updater
        #uses: rwaight/actions/releases/release-tag-updater@v1 # can use version specific or main
        uses: rwaight/actions/releases/release-tag-updater@main # can use version specific or main
        with:
          tag: ${{ steps.release-vars-output.outputs.RELEASE_VERSION }}
          prefix-regex: 'v?'
          fail-on-non-semver-tag: true # default is false
          update-major: true
          update-minor: true
          skip-repo-setup: true # default is false
          create-release: false # default is true
        #if: (github.ref_type == 'tag' && github.event.release.prerelease == false)
        if: github.event.release.prerelease == false

