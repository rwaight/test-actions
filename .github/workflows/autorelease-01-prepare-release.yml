# from https://github.com/release-flow/keep-a-changelog-action/blob/v3.0.0/.github/workflows/prepare-release.yml
name: 'autorelease test - prepare release PR'
run-name: 'Test: prepare `${{ inputs.release-type }}` release PR'

on: 
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release type'
        type: choice
        required: true
        options:
          - major
          - minor
          - patch
          - premajor
          - preminor
          - prepatch
          - prerelease
          - pretoprod
        default: patch
      reviewed-image:
        description: 'The ID of the image that will be converted'
        default: 'not-set'
        required: true
        type: string
      # preid:
      #   description: 'Pre-release identifier (only for pre-release builds)'
      #   default: rc
      #   required: false

permissions:
  #contents: read
  contents: write
  issues: write
  pull-requests: write

jobs:
  prepare-release:
    name: Prepare ${{ inputs.release-type }} release pull request
    runs-on: ubuntu-latest
    outputs:
      job-status: ${{ job.status }}
      # output from the 'repo-version-info' step
      latest-release: ${{ steps.repo-version-info.outputs.latest-release }}
      latest-tag: ${{ steps.repo-version-info.outputs.latest-tag }}
      # output from the 'get-next-semver' step
      current-tag: ${{ steps.get-next-semver.outputs.current-tag }}
      current-version: ${{ steps.get-next-semver.outputs.current-version }}
      next-version: ${{ steps.get-next-semver.outputs.next-version }}
      is-next-prerelease: ${{ steps.get-next-semver.outputs.is-next-prerelease }}
      # output from the 'bump-json-version' step
      current-release-version: ${{ steps.bump-json-version.outputs.current-release-version }}
      next-release-version: ${{ steps.bump-json-version.outputs.next-release-version }}
      old-json-version: ${{ steps.bump-json-version.outputs.old-json-version }}
      new-json-version: ${{ steps.bump-json-version.outputs.new-json-version }}
      # output from the 'release-drafter' step
      release-id: ${{ steps.release-drafter.outputs.id }}
      release-name: ${{ steps.release-drafter.outputs.name }}
      release-tag-name: ${{ steps.release-drafter.outputs.tag_name }}
      release-html-url: ${{ steps.release-drafter.outputs.html_url }}
      release-upload-url: ${{ steps.release-drafter.outputs.upload_url }}
      release-major-version: ${{ steps.release-drafter.outputs.major_version }}
      release-minor-version: ${{ steps.release-drafter.outputs.minor_version }}
      release-patch-version: ${{ steps.release-drafter.outputs.patch_version }}
      release-resolved-version: ${{ steps.release-drafter.outputs.resolved_version }}
      ##
    env:
      VERBOSE_WORKFLOW: ${{ inputs.verbose_output || 'true' }}
    steps:
      # https://github.com/actions/create-github-app-token
      - name: Creating a GitHub App Token from actions/create-github-app-token
        #uses: actions/create-github-app-token@v1
        uses: actions/create-github-app-token@f2acddfb5195534d487896a656232b016a682f3c
        id: app-token
        with:
          # required
          app-id: ${{ secrets.RW_ACTIONS_APP_ID }}
          private-key: ${{ secrets.RW_ACTIONS_APP_KEY }}

      - name: Checkout files from commit tree
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
          #ref: ${{ github.head_ref }}
          token: ${{ steps.app-token.outputs.token }}

      - name: repo-version-info | Run rwaight/actions git/repo-version-info
        id: repo-version-info
        uses: rwaight/actions/git/repo-version-info@main
        with:
          #gh-token: ${{ secrets.GITHUB_TOKEN }}
          gh-token: ${{ steps.app-token.outputs.token }}

      - name: repo-version-info | Print outputs
        id: print-repo-info
        if: |
          ${{ steps.repo-version-info.outputs.latest-tag }} || 
          ${{ steps.repo-version-info.outputs.latest-release }}
        run: |
          ## Print repo version information
          echo "Here is the info from the repo-version-info step: "
          echo "- latest release: ${{ steps.repo-version-info.outputs.latest-release }}"
          echo "- latest tag: ${{ steps.repo-version-info.outputs.latest-tag }}"
          ##
          echo "### Output from the \`repo-version-info\` step" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "- latest release: ${{ steps.repo-version-info.outputs.latest-release }}" >> $GITHUB_STEP_SUMMARY
          echo "- latest tag: ${{ steps.repo-version-info.outputs.latest-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line

      - name: get-next-semver | Run rwaight/actions test/get-next-semver
        id: get-next-semver
        #continue-on-error: true
        uses: rwaight/actions/test/get-next-semver@main
        with:
          gh-token: ${{ steps.app-token.outputs.token }}
          pre-release-id: ${{ inputs.preid }}
          release-type: ${{ inputs.release-type }}
          action-verbose: true

      - name: get-next-semver | Print outputs
        if: ${{ steps.get-next-semver.outputs.next-version }}
        run: |
          ## Report the output from the get-next-semver step
          echo "The output from the 'get-next-semver' step was: "
          echo "- current tag       : ${{ env.current-tag }} "
          echo "- current version   : ${{ env.current-version }} "
          echo "- next version      : ${{ env.next-version }} "
          echo "- is next prerelease: ${{ env.is-next-prerelease }} "
          ##
          echo "### Output from the \`get-next-semver\` step" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "- current tag       : ${{ env.current-tag }} " >> $GITHUB_STEP_SUMMARY
          echo "- current version   : ${{ env.current-version }} " >> $GITHUB_STEP_SUMMARY
          echo "- next version      : ${{ env.next-version }} " >> $GITHUB_STEP_SUMMARY
          echo "- is next prerelease: ${{ env.is-next-prerelease }} " >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
        env:
          current-tag: ${{ steps.get-next-semver.outputs.current-tag }}
          current-version: ${{ steps.get-next-semver.outputs.current-version }}
          next-version: ${{ steps.get-next-semver.outputs.next-version }}
          is-next-prerelease: ${{ steps.get-next-semver.outputs.is-next-prerelease }}

      # maybe use https://github.com/EndBug/add-and-commit instead?
      # user: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>'
      # user: 'rw-actions-bot <noreply@github.com>'
      - name: Set up git config
        id: set-up-git
        run: |
          ## Run 'git --version' then 'git config'
          git --version
          ## Configure git to login as the RW Actions Bot.
          git config user.name rw-actions-bot[bot]
          git config user.email ${{ secrets.RW_ACTIONS_BOT_UID }}+rw-actions-bot[bot]@users.noreply.github.com
          echo "the 'set-up-git' step has completed. "

      - name: Ensure 'actions:autorelease' label exists
        run: |
          LABEL=$(gh label list --search "actions:autorelease" --limit 1 --json name --jq '.[].name')
          echo "  the value of LABEL is '${LABEL}'. "
          if [[ -z "$LABEL" ]]; then
            echo "Creating 'actions:autorelease' label"
            gh api --silent repos/$GITHUB_REPOSITORY/labels -f name="actions:autorelease" -f color="baa938" -f description="This is an automatically-created PR to trigger a release"
          else
            echo "the 'actions:autorelease' label already exists"
          fi
        env:
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}

      - name: Ensure 'version:${{ inputs.release-type }}' label exists
        run: |
          LABEL=$(gh label list --search "version:${{ inputs.release-type }}" --limit 1 --json name --jq '.[].name')
          echo "  the value of LABEL is '${LABEL}'. "
          if [[ -z "$LABEL" ]]; then
            echo "Creating 'version:${{ inputs.release-type }}' label"
            gh api --silent repos/$GITHUB_REPOSITORY/labels -f name="version:${{ inputs.release-type }}" -f color="baa938" -f description="Related to a ''${{ inputs.release-type }}'' version release"
          else
            echo "the 'version:${{ inputs.release-type }}' label already exists"
          fi
        env:
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}

      - name: update-json-field | Run rwaight/actions test/update-json-field
        id: update-json-field
        continue-on-error: true
        uses: rwaight/actions/test/update-json-field@main
        #uses: rwaight/actions/test/update-json-field@dev-rw-202405-v16
        with:
          json-file: 'my-test-custom-variables.json'
          vars-field: 'other_var_02'
          #gh-token: ${{ steps.app-token.outputs.token }}
          vars-new-value: ${{ steps.get-next-semver.outputs.next-version }}
          action-verbose: true

      - name: update-json-field | Print outputs
        if: ${{ steps.update-json-field.outputs.new-value }}
        run: |
          echo "The output from the 'update-json-field' step was: "
          echo "previous value: ${{ env.previous-value }} "
          echo "new value     : ${{ env.new-value }} "
        env:
          previous-value: ${{ steps.update-json-field.outputs.previous-value }}
          new-value: ${{ steps.update-json-field.outputs.new-value }}

      - name: bump-json-version | Run rwaight/actions test/bump-json-version
        id: bump-json-version
        continue-on-error: true
        #uses: rwaight/actions/test/bump-json-version@main
        uses: rwaight/actions/test/bump-json-version@dev-rw-202405-v16
        with:
          author-name: rw-actions-bot[bot]
          author-email: ${{ secrets.RW_ACTIONS_BOT_UID }}+rw-actions-bot[bot]@users.noreply.github.com
          committer-name: rw-actions-bot[bot]
          committer-email: ${{ secrets.RW_ACTIONS_BOT_UID }}+rw-actions-bot[bot]@users.noreply.github.com
          default-author: github_actions
          json-vars-file: 'my-test-custom-variables.json'
          json-vars-field: 'my_custom_version'
          gh-token: ${{ steps.app-token.outputs.token }}
          release-type: ${{ inputs.release-type }}
          release-version: ${{ steps.get-next-semver.outputs.next-version }}
          action-verbose: true

      - name: bump-json-version | Print outputs
        if: ${{ steps.bump-json-version.outputs.next-release-version }}
        run: |
          echo "The output from the 'bump-json-version' step was: "
          echo "current release version: ${{ env.current-release-version }} "
          echo "next release version: ${{ env.next-release-version }} "
          echo "old json version: ${{ env.old-json-version }} "
          echo "new json version: ${{ env.new-json-version }} "
        env:
          current-release-version: ${{ steps.bump-json-version.outputs.current-release-version }}
          next-release-version: ${{ steps.bump-json-version.outputs.next-release-version }}
          old-json-version: ${{ steps.bump-json-version.outputs.old-json-version }}
          new-json-version: ${{ steps.bump-json-version.outputs.new-json-version }}

      # Drafts your next Release notes as Pull Requests are merged into the default branch (i.e., "main")
      - name: release-drafter | Run rwaight/actions release-drafter
        #uses: rwaight/actions/releases/release-drafter@v1
        uses: rwaight/actions/releases/release-drafter@main
        id: release-drafter
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        with:
          config-name: release-template_monorepo-test-actions.yml # located in .github/ in default branch
          version: ${{ steps.get-next-semver.outputs.next-version }}
          #prerelease-identifier: ${{ inputs.preid }}
          prerelease: ${{ steps.get-next-semver.outputs.is-next-prerelease }}
          # https://github.com/release-drafter/release-drafter/pull/1302
          include-pre-releases: ${{ steps.get-next-semver.outputs.is-next-prerelease }}
          #include-pre-releases: true
        env:
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: release-drafter | Print outputs
        # Run this step if the 'id' output was set in the 'release-drafter' step
        if: ${{ steps.release-drafter.outputs.id }}
        id: print-release-drafter-outputs
        run: |
         echo "The release drafter step outputs are: "
         echo "id: ${{ steps.release-drafter.outputs.id }}" 
         echo "name: ${{ steps.release-drafter.outputs.name }}" 
         echo "tag_name: ${{ steps.release-drafter.outputs.tag_name }}" 
         echo ""
         echo "URLs: "
         echo "html_url: ${{ steps.release-drafter.outputs.html_url }}" 
         echo "upload_url: ${{ steps.release-drafter.outputs.upload_url }}" 
         echo ""
         echo "Version Info: "
         echo "major_version: ${{ steps.release-drafter.outputs.major_version }}" 
         echo "minor_version: ${{ steps.release-drafter.outputs.minor_version }}" 
         echo "patch_version: ${{ steps.release-drafter.outputs.patch_version }}" 
         echo "resolved_version: ${{ steps.release-drafter.outputs.resolved_version }}" 
         echo ""
         echo "body: "
         echo "${{ steps.release-drafter.outputs.body }}"
         echo " === end of body === "
         echo ""
         echo "The 'print-release-drafter-outputs' step is now complete. "

      - name: Need to write to the unreleased section here
        id: notice-about-changelog
        run: |
          echo "Need to actually write to the unreleased section of the changelog here. "
          echo "might need to look at https://github.com/heinrichreimer/action-github-changelog-generator"

      - name: Verbose | File structure before the multiple changelog actions
        #if: env.VERBOSE_WORKFLOW=='true'
        run: ls -R

      # - name: Create a release notes file
      #   if: env.TROUBLESHOOT_WORKFLOW=='true'
      #   id: create-release-notes-file
      #   run: |
      #     ## Create a changelog file using the output from the get-next-semver step
      #     ##echo "" >> ${{ env.changelog-file }}
      #     touch ${{ env.changelog-file }}
      #     echo "The output from the 'get-next-semver' step was: " >> ${{ env.changelog-file }}
      #     echo "- current tag       : ${{ env.current-tag }} " >> ${{ env.changelog-file }}
      #     echo "- current version   : ${{ env.current-version }} " >> ${{ env.changelog-file }}
      #     echo "- next version      : ${{ env.next-version }} " >> ${{ env.changelog-file }}
      #     echo "- is next prerelease: ${{ env.is-next-prerelease }} " >> ${{ env.changelog-file }}
      #     echo "" >> ${{ env.changelog-file }}
      #     ##
      #     ## Create a changelog file using the output from the release-drafter step
      #     echo "The release drafter step outputs are: " >> ${{ env.changelog-file }}
      #     echo "id: ${{ steps.release-drafter.outputs.id }}" >> ${{ env.changelog-file }}
      #     echo "name: ${{ steps.release-drafter.outputs.name }}" >> ${{ env.changelog-file }}
      #     echo "tag_name: ${{ steps.release-drafter.outputs.tag_name }}" >> ${{ env.changelog-file }}
      #     echo "" >> ${{ env.changelog-file }}
      #     echo "URLs: " >> ${{ env.changelog-file }}
      #     echo "html_url: ${{ steps.release-drafter.outputs.html_url }}" >> ${{ env.changelog-file }}
      #     echo "upload_url: ${{ steps.release-drafter.outputs.upload_url }}" >> ${{ env.changelog-file }}
      #     echo "" >> ${{ env.changelog-file }}
      #     echo "Version Info: " >> ${{ env.changelog-file }}
      #     echo "major_version: ${{ steps.release-drafter.outputs.major_version }} " >> ${{ env.changelog-file }}
      #     echo "minor_version: ${{ steps.release-drafter.outputs.minor_version }} " >> ${{ env.changelog-file }}
      #     echo "patch_version: ${{ steps.release-drafter.outputs.patch_version }} " >> ${{ env.changelog-file }}
      #     echo "resolved_version: ${{ steps.release-drafter.outputs.resolved_version }} " >> ${{ env.changelog-file }}
      #     echo "" >> ${{ env.changelog-file }}
      #     echo "" >> ${{ env.changelog-file }}
      #   env:
      #     changelog-file: release-drafter-${{ steps.get-next-semver.outputs.next-version }}-release-notes.md
      #     current-tag: ${{ steps.get-next-semver.outputs.current-tag }}
      #     current-version: ${{ steps.get-next-semver.outputs.current-version }}
      #     next-version: ${{ steps.get-next-semver.outputs.next-version }}
      #     is-next-prerelease: ${{ steps.get-next-semver.outputs.is-next-prerelease }}
      #   ## steps removed from above
      #     ###echo "body: " >> ${{ env.changelog-file }}
      #     ###echo 'release_draft_body<<ReleaseDraftEOF' >> ${{ env.changelog-file }}
      #     ###echo "${{ steps.release-drafter.outputs.body }}" >> ${{ env.changelog-file }}
      #     ###echo " === end of body === " >> ${{ env.changelog-file }}
      #     ###echo 'ReleaseDraftEOF' >> ${{ env.changelog-file }}

      # # this is causing issues with the 'create-release-pr' step
      # - name: Commit release drafter notes file
      #   uses: rwaight/actions/git/add-and-commit@main
      #   with:
      #     add: 'release-drafter-${{ steps.get-next-semver.outputs.next-version }}-release-notes.md'
      #     #default_author: rw-actions-bot[bot]
      #     default_author: user_info
      #     author_name: rw-actions-bot[bot]
      #     author_email: ${{ secrets.RW_ACTIONS_BOT_UID }}+rw-actions-bot[bot]@users.noreply.github.com
      #     message: "chore: draft release-notes for release ${{ steps.get-next-semver.outputs.next-version }}"
      #     committer_name: rw-actions-bot[bot]
      #     committer_email: ${{ secrets.RW_ACTIONS_BOT_UID }}+rw-actions-bot[bot]@users.noreply.github.com
      #     new_branch: 'autorelease/test-run-${{ github.run_id }}/${{ steps.get-next-semver.outputs.next-version }}'

      # - name: Copy the template-CHANGELOG.md into keep-a-changelog-${{ steps.get-next-semver.outputs.next-version }}-autorelease-CHANGELOG.md
      #   id: copy-changelog-template-file
      #   run: |
      #     ## Copy the template-CHANGELOG.md into keep-a-changelog-${{ steps.get-next-semver.outputs.next-version }}-autorelease-CHANGELOG.md
      #     cp template-CHANGELOG.md keep-a-changelog-${{ steps.get-next-semver.outputs.next-version }}-autorelease-CHANGELOG.md
      # - name: Copy the template-CHANGELOG.md into keep-a-changelog-${{ steps.get-next-semver.outputs.next-version }}-autorelease-CHANGELOG.md

      - name: Update the '${{ env.vars-file }}' file
        id: update-vars-file
        run: |
          ## Update the '${{ env.vars-file }}' file 
          echo "Starting the 'update-vars-file' step... "
          echo "  updating the 'my_release_type' field with the user provided release-type"
          tmp1=$(mktemp)
          jq '.my_release_type = "${{ env.release-type }}"' ${{ env.vars-file }} > "$tmp1" && mv "$tmp1" ${{ env.vars-file }}
          echo "    the jq command has finished "
          echo "  checking the value of the 'my_release_type' field "
          check_release_type=$(jq --raw-output .my_release_type ${{ env.vars-file }})
          echo "    my_release_type: ${check_release_type}"
          echo ""
          #
          echo "updating the 'my_reviewed_image' field with the user provided reviewed-image"
          tmp2=$(mktemp)
          jq '.my_reviewed_image = "${{ env.reviewed-image }}"' ${{ env.vars-file }} > "$tmp2" && mv "$tmp2" ${{ env.vars-file }}
          echo "    the jq command has finished "
          echo "  checking the value of the 'my_reviewed_image' field "
          check_reviewed_image=$(jq --raw-output .my_reviewed_image ${{ env.vars-file }})
          echo "    my_reviewed_image: ${check_reviewed_image}"
          echo ""
          #
          echo "Finishing the 'update-vars-file' step... "
        env:
          next-version: ${{ steps.get-next-semver.outputs.next-version }}
          vars-file: my-test-custom-variables.json
          release-type: ${{ inputs.release-type }}
          reviewed-image: ${{ inputs.reviewed-image }}

      # this is not on the branch used for the autorelease PR, so do not commit and push them
      #   need to see if the 'git/add-and-commit' supports commit without push?
      # - name: Commit changes to the '${{ env.vars-file }}' file
      #   id: commit-vars-file-changes
      #   # probably want to only try to commit changes if 'does_next_match_updated' is 'true'
      #   #if: ( '${{ steps.get-updated-version.outputs.does_next_match_updated }}' == 'true' )
      #   #uses: stefanzweifel/git-auto-commit-action@v4
      #   #uses: EndBug/add-and-commit@v9
      #   uses: rwaight/actions/git/add-and-commit@main
      #   with:
      #     add: ${{ env.vars-file }}
      #     author_name: rw-actions-bot[bot]
      #     author_email: ${{ secrets.RW_ACTIONS_BOT_UID }}+rw-actions-bot[bot]@users.noreply.github.com
      #     commit: --signoff
      #     committer_name: rw-actions-bot[bot]
      #     committer_email: ${{ secrets.RW_ACTIONS_BOT_UID }}+rw-actions-bot[bot]@users.noreply.github.com
      #     default_author: user_info
      #     message: 'chore(vars-json): update the release-type and reviewed-image for the ${{ inputs.release-type }} release'
      #   env:
      #     next-version: ${{ steps.get-next-semver.outputs.next-version }}
      #     vars-file: my-test-custom-variables.json

      # https://github.com/release-flow/keep-a-changelog-action
      - name: run release-flow/keep-a-changelog-action from rwaight import
        id: run-release-flow-keep-a-changelog-action
        #uses: release-flow/keep-a-changelog-action@v3
        #uses: release-flow/keep-a-changelog-action@74931dec7ecdbfc8e38ac9ae7e8dd84c08db2f32
        uses: rwaight/actions/git/keep-a-changelog-action@main
        with:
          # https://github.com/release-flow/keep-a-changelog-action/blob/main/docs/bump.md
          command: bump
          keep-unreleased-section: true
          # commenting out 'keep-unreleased-section: true' did not fix having blank release notes
          # going to comment out the 'query' steps prior to the 'bump' step
          # going to try to comment out the 'fail-on-empty-release-notes' option next
          #version: ${{ github.event.inputs.release-type }}
          version: ${{ inputs.release-type }}
          #preid: ${{ github.event.inputs.preid }}
          preid: ${{ inputs.preid }}
          fail-on-empty-release-notes: false
          #changelog: keep-a-changelog-${{ steps.get-next-semver.outputs.next-version }}-autorelease-CHANGELOG.md
          changelog: ./keep-a-changelog_release-flow_CHANGELOG.md

      # # this is causing issues with the 'create-release-pr' step
      # - name: Commit the keep-a-changelog file
      #   uses: rwaight/actions/git/add-and-commit@main
      #   with:
      #     add: 'keep-a-changelog-${{ steps.get-next-semver.outputs.next-version }}-autorelease-CHANGELOG.md'
      #     #default_author: rw-actions-bot[bot]
      #     default_author: user_info
      #     author_name: rw-actions-bot[bot]
      #     author_email: ${{ secrets.RW_ACTIONS_BOT_UID }}+rw-actions-bot[bot]@users.noreply.github.com
      #     message: "chore: add keep-a-changelog for release ${{ steps.get-next-semver.outputs.next-version }}"
      #     committer_name: rw-actions-bot[bot]
      #     committer_email: ${{ secrets.RW_ACTIONS_BOT_UID }}+rw-actions-bot[bot]@users.noreply.github.com
      #     new_branch: 'autorelease/test-run-${{ github.run_id }}/${{ steps.get-next-semver.outputs.next-version }}'

      # https://github.com/mikepenz/release-changelog-builder-action
      - name: run mikepenz/release-changelog-builder-action
        id: run-mikepenz-release-changelog-builder-action
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          fromTag: ${{ steps.get-next-semver.outputs.current-version }}
          toTag: ${{ steps.get-next-semver.outputs.next-version }}
          # https://github.com/mikepenz/release-changelog-builder-action?tab=readme-ov-file#action-inputsoutputs
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          token: ${{ steps.app-token.outputs.token }}
          ignorePreReleases: "false"   # default is 'false'
          outputFile: ./changelog-builder-mikepenz-CHANGELOG.md
          #fetchReleaseInformation: true   # default is 'false'
          # we may need to use 'fetchViaCommits', but looks like
          # we will also need to include the 'fromTag' and 'toTag' options

      # https://github.com/stefanzweifel/changelog-updater-action
      # from https://github.com/stefanzweifel/changelog-updater-action/blob/main/.github/workflows/update-changelog.yaml
      - name: run stefanzweifel/changelog-updater-action
        id: run-stefanzweifel-changelog-updater-action
        uses: stefanzweifel/changelog-updater-action@v1
        with:
          release-notes: ${{ steps.release-drafter.outputs.body }}
          latest-version: ${{ steps.get-next-semver.outputs.next-version }}
          path-to-changelog: ./changelog-updater-stefanzweifel-CHANGELOG.md

      # https://github.com/heinrichreimer/action-github-changelog-generator
      # from https://github.com/github-changelog-generator/github-changelog-generator/wiki/Advanced-change-log-generation-examples#additional-options
      - name: run heinrichreimer/action-github-changelog-generator with sinceTag only
        id: run-heinrichreimer-action-github-changelog-generator-sinceTag-only
        uses: heinrichreimer/action-github-changelog-generator@v2.3
        with:
          token: ${{ steps.app-token.outputs.token }}
          output: ./changelog-generator-heinrichreimer-sinceTag-only.md
          sinceTag: ${{ steps.get-next-semver.outputs.current-version }}
          #dueTag: ${{ steps.get-next-semver.outputs.next-version }}
          # might need to set 'futureRelease'
          # Put the unreleased changes in the specified release number.
          # This will replace Unreleased section with the specified tag. Handy for generating change logs before tagging.
          futureRelease: ${{ steps.get-next-semver.outputs.next-version }}
          issues: true
          pullRequests: true
          unreleased: true
          verbose: true
          ##
          # the examples do not match what the action wants
          # Unexpected input(s) 'since-tag', valid inputs are 
          # ['entryPoint', 'args', 'repo', 'user', 'project', 'token', 'dateFormat', 'output', 'base', 'headerLabel',
          #  'configureSections', 'addSections', 'frontMatter', 'issues', 'issuesWoLabels', 'pullRequests', 
          # 'prWoLabels', 'filterByMilestone', 'author', 'usernamesAsGithubLogins', 'unreleasedOnly', 'unreleased', 
          # 'unreleasedLabel', 'compareLink', 'includeLabels', 'excludeLabels', 'issueLineLabels', 'excludeTags', 
          # 'excludeTagsRegex', 'sinceTag', 'dueTag', 'maxIssues', 'releaseUrl', 'githubSite', 'githubApi', 'simpleList', 
          # 'futureRelease', 'releaseBranch', 'httpCache', 'cacheFile', 'cacheLog', 'sslCaFile', 'verbose', 'breakingLabel', 
          # 'breakingLabels', 'enhancementLabel', 'enhancementLabels', 'bugsLabel', 'bugLabels', 'deprecatedLabel', 
          # 'deprecatedLabels', 'removedLabel', 'removedLabels', 'securityLabel', 'securityLabels', 'issuesLabel', 
          # 'prLabel', 'onlyLastTag', 'stripHeaders', 'stripGeneratorNotice']

      # https://github.com/heinrichreimer/action-github-changelog-generator
      # from https://github.com/github-changelog-generator/github-changelog-generator/wiki/Advanced-change-log-generation-examples#additional-options
      - name: run heinrichreimer/action-github-changelog-generator with sinceTag and dueTag
        id: run-heinrichreimer-action-github-changelog-generator
        uses: heinrichreimer/action-github-changelog-generator@v2.3
        continue-on-error: true
        with:
          token: ${{ steps.app-token.outputs.token }}
          output: ./changelog-generator-heinrichreimer-sinceTag-and-dueTag.md
          sinceTag: ${{ steps.get-next-semver.outputs.current-version }}
          dueTag: ${{ steps.get-next-semver.outputs.next-version }}
          # might need to set 'futureRelease'
          # Put the unreleased changes in the specified release number.
          # This will replace Unreleased section with the specified tag. Handy for generating change logs before tagging.
          futureRelease: ${{ steps.get-next-semver.outputs.next-version }}
          issues: true
          pullRequests: true
          unreleased: true
          verbose: true
          ##
          # the examples do not match what the action wants
          # Unexpected input(s) 'since-tag', valid inputs are 
          # ['entryPoint', 'args', 'repo', 'user', 'project', 'token', 'dateFormat', 'output', 'base', 'headerLabel',
          #  'configureSections', 'addSections', 'frontMatter', 'issues', 'issuesWoLabels', 'pullRequests', 
          # 'prWoLabels', 'filterByMilestone', 'author', 'usernamesAsGithubLogins', 'unreleasedOnly', 'unreleased', 
          # 'unreleasedLabel', 'compareLink', 'includeLabels', 'excludeLabels', 'issueLineLabels', 'excludeTags', 
          # 'excludeTagsRegex', 'sinceTag', 'dueTag', 'maxIssues', 'releaseUrl', 'githubSite', 'githubApi', 'simpleList', 
          # 'futureRelease', 'releaseBranch', 'httpCache', 'cacheFile', 'cacheLog', 'sslCaFile', 'verbose', 'breakingLabel', 
          # 'breakingLabels', 'enhancementLabel', 'enhancementLabels', 'bugsLabel', 'bugLabels', 'deprecatedLabel', 
          # 'deprecatedLabels', 'removedLabel', 'removedLabels', 'securityLabel', 'securityLabels', 'issuesLabel', 
          # 'prLabel', 'onlyLastTag', 'stripHeaders', 'stripGeneratorNotice']

      - name: Verbose | File structure after the multiple changelog actions
        #if: env.VERBOSE_WORKFLOW=='true'
        run: ls -R

      # # might not need this step if the 'create-release-pr' step will add and commit the file
      # - name: Commit changelog
      #   uses: rwaight/actions/git/add-and-commit@main
      #   with:
      #     add: '*.txt'
      #     #default_author: rw-actions-bot[bot]
      #     default_author: user_info
      #     author_name: rw-actions-bot[bot]
      #     author_email: ${{ secrets.RW_ACTIONS_BOT_UID }}+rw-actions-bot[bot]@users.noreply.github.com
      #     message: "chore: draft changelog for ${{ github.event.inputs.release-type }} release ${{ steps.get-next-semver.outputs.next-version }}"
      #     committer_name: rw-actions-bot[bot]
      #     committer_email: ${{ secrets.RW_ACTIONS_BOT_UID }}+rw-actions-bot[bot]@users.noreply.github.com
      #     new_branch: 'autorelease/test-run-${{ github.run_id }}/${{ steps.get-next-semver.outputs.next-version }}'

      # - name: Print notice that no pr is being created
      #   id: print-notice-no-pr
      #   run: |
      #     echo "::notice title=Release PR NOT Prepared::A release PR WAS NOT created, please review the output of the workflow"

      - name: Create Pull Request using rwaight/actions/github/create-pull-request
        id: create-release-pr
        #uses: peter-evans/create-pull-request@v6
        #uses: peter-evans/create-pull-request@70a41aba780001da0a30141984ae2a0c95d8704e
        uses: rwaight/actions/github/create-pull-request@main
        with:
          commit-message: 'chore: changelog for release ${{ steps.get-next-semver.outputs.next-version }}'
          add-paths: |
            ./*.txt
            ./*.md
            my-test-custom-variables.json
          #committer: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>' # this is the default
          #committer: 'releasebot <noreply@github.com>'
          committer: 'rw-actions-bot[bot] <${{ secrets.RW_ACTIONS_BOT_UID }}+rw-actions-bot[bot]@users.noreply.github.com>'
          #branch: 'autorelease/test-run-${{ github.run_id }}/${{ steps.get-next-semver.outputs.next-version }}'
          branch: 'autorelease/${{ steps.get-next-semver.outputs.next-version }}'
          #base: 'main'
          title: '[autorelease] test release ${{ steps.get-next-semver.outputs.next-version }}'
          # Be careful of newlines here. We need to use the literal block chomping style (|) so that the
          # contents of the release notes don't get chomped. See https://yaml-multiline.info/
          body: |
            **This PR was created automatically by the rw-actions-bot**

            **:warning: Merging this PR will trigger a workflow that creates a version tag and generates a draft release.**
            
            **You need to publish the release manually, when you are happy with it.**

            ## Release notes

            The changes in this PR prepare for release ${{ steps.get-next-semver.outputs.next-version }}. 
            
            A release draft has been created, please review it as part of the release process: ${{ steps.release-drafter.outputs.html_url }}

            The release notes from release-drafter are:

            ---

            ${{ steps.release-drafter.outputs.body }}
          #labels: actions:autorelease, version:${{ github.event.inputs.release-type }}
          labels: actions:autorelease, skip-changelog, version:${{ inputs.release-type }}
          #labels: actions:autorelease, skip-changelog
          #token: ${{ secrets.GITHUB_TOKEN }}
          token: ${{ steps.app-token.outputs.token }}

      - name: Check outputs from create-release-pr
        if: ${{ steps.create-release-pr.outputs.pull-request-number }}
        run: |
          echo "Pull Request Number - ${{ steps.create-release-pr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.create-release-pr.outputs.pull-request-url }}"

      - name: Output summary
        run: |
          echo "::notice title=Release PR Prepared::A release PR has been created, please merge it to continue with the release process: ${{ steps.create-release-pr.outputs.pull-request-url }}"
          echo "::notice title=Draft release prepared::A release draft has been created, please review it as part of the release process: ${{ steps.release-drafter.outputs.html_url }}"

  call-build:
    # call the build workflow
    name: Call the build workflow
    uses: ./.github/workflows/build.yml
    needs: [prepare-release]
    if: (github.repository_owner == 'rwaight')
    with:
      build_method: 'to-main'
      build_version: ${{ needs.prepare-release.outputs.next-version }}
      create_image: 'false'
      reviewed_image: ${{ inputs.reviewed-image }}
      #release_type: ${{ inputs.release-type }}
    secrets: inherit

  print-build-results:
    name: Print the build results
    runs-on: ubuntu-latest
    needs: [prepare-release, call-build]
    env:
      prepare-job-status: ${{ needs.prepare-release.outputs.job-status }}
      latest-release: ${{ needs.prepare-release.outputs.latest-release }}
      latest-tag: ${{ needs.prepare-release.outputs.latest-tag }}
      # output from the 'get-next-semver' step
      current-tag: ${{ needs.prepare-release.outputs.current-tag }}
      current-version: ${{ needs.prepare-release.outputs.current-version }}
      next-version: ${{ needs.prepare-release.outputs.next-version }}
      is-next-prerelease: ${{ needs.prepare-release.outputs.is-next-prerelease }}
      # output from the 'bump-json-version' step
      current-release-version: ${{ needs.prepare-release.outputs.current-release-version }}
      next-release-version: ${{ needs.prepare-release.outputs.next-release-version }}
      old-json-version: ${{ needs.prepare-release.outputs.old-json-version }}
      new-json-version: ${{ needs.prepare-release.outputs.new-json-version }}
      # output from the 'release-drafter' step
      release-id: ${{ needs.prepare-release.outputs.id }}
      release-name: ${{ needs.prepare-release.outputs.name }}
      release-tag-name: ${{ needs.prepare-release.outputs.tag_name }}
      release-html-url: ${{ needs.prepare-release.outputs.html_url }}
      release-upload-url: ${{ needs.prepare-release.outputs.upload_url }}
      release-major-version: ${{ needs.prepare-release.outputs.major_version }}
      release-minor-version: ${{ needs.prepare-release.outputs.minor_version }}
      release-patch-version: ${{ needs.prepare-release.outputs.patch_version }}
      release-resolved-version: ${{ needs.prepare-release.outputs.resolved_version }}
      ##
      BUILD_JOB_STATUS: ${{ needs.call-build.outputs.BUILD_JOB_STATUS }}
      BUILD_TYPE: ${{ needs.call-build.outputs.BUILD_TYPE }}
      BUILD_METHOD: ${{ needs.call-build.outputs.BUILD_METHOD }}
      BUILD_VERSION: ${{ needs.call-build.outputs.BUILD_VERSION }}
      BUILD_OUTCOME: ${{ needs.call-build.outputs.BUILD_OUTCOME }}
      REVIEWED_IMAGE: ${{ needs.call-build.outputs.REVIEWED_IMAGE }}
      VERBOSE_WORKFLOW: ${{ inputs.verbose_output || 'true' }}
    steps:

      - name: Print outputs from the 'prepare-release' job
        if: ${{ env.prepare-job-status }}
        run: |
          echo "outputs from the 'prepare-release' job "
          echo ""
          echo "  prepare-job-status: ${{ needs.prepare-release.outputs.job-status }} "
          echo "  latest-release: ${{ needs.prepare-release.outputs.latest-release }} "
          echo "  latest-tag: ${{ needs.prepare-release.outputs.latest-tag }} "
          echo ""
          echo "output from the 'get-next-semver' step "
          echo "  current-tag: ${{ needs.prepare-release.outputs.current-tag }} "
          echo "  current-version: ${{ needs.prepare-release.outputs.current-version }} "
          echo "  next-version: ${{ needs.prepare-release.outputs.next-version }} "
          echo "  is-next-prerelease: ${{ needs.prepare-release.outputs.is-next-prerelease }} "
          echo ""
          echo "output from the 'bump-json-version' step "
          echo "  current-release-version: ${{ needs.prepare-release.outputs.current-release-version }} "
          echo "  next-release-version: ${{ needs.prepare-release.outputs.next-release-version }} "
          echo "  old-json-version: ${{ needs.prepare-release.outputs.old-json-version }} "
          echo "  new-json-version: ${{ needs.prepare-release.outputs.new-json-version }} "
          echo ""
          echo "output from the 'release-drafter' step "
          echo "  release-id: ${{ needs.prepare-release.outputs.id }} "
          echo "  release-name: ${{ needs.prepare-release.outputs.name }} "
          echo "  release-tag-name: ${{ needs.prepare-release.outputs.tag_name }} "
          echo "  release-html-url: ${{ needs.prepare-release.outputs.html_url }} "
          echo "  release-upload-url: ${{ needs.prepare-release.outputs.upload_url }} "
          echo "  release-major-version: ${{ needs.prepare-release.outputs.major_version }} "
          echo "  release-minor-version: ${{ needs.prepare-release.outputs.minor_version }} "
          echo "  release-patch-version: ${{ needs.prepare-release.outputs.patch_version }} "
          echo "  release-resolved-version: ${{ needs.prepare-release.outputs.resolved_version }} "
          echo ""

      - name: Print outputs from the 'call-build' job
        if: ${{ env.BUILD_OUTCOME }}
        run: |
          echo "outputs from the 'call-build' job "
          echo ""
          echo "BUILD_JOB_STATUS: ${{ needs.call-build.outputs.BUILD_JOB_STATUS }} "
          echo "BUILD_TYPE: ${{ needs.call-build.outputs.BUILD_TYPE }} "
          echo "BUILD_METHOD: ${{ needs.call-build.outputs.BUILD_METHOD }} "
          echo "BUILD_VERSION: ${{ needs.call-build.outputs.BUILD_VERSION }} "
          echo "BUILD_OUTCOME: ${{ needs.call-build.outputs.BUILD_OUTCOME }} "
          echo "REVIEWED_IMAGE: ${{ needs.call-build.outputs.REVIEWED_IMAGE }} "
          echo ""
