name: Test - get tag info
run-name: 'Print pushed tag info'

on: 
  push:
    tags:
      - 'v*.*.*'

permissions:
  #contents: read
  contents: write
  #issues: write
  #pull-requests: write

jobs:

  print-tag-info:
    #name: print-tag-info
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.release-vars-output.outputs.RELEASE_VERSION }}
    if: (github.repository_owner == 'rwaight')
    #if: | 
    #  (github.repository_owner == 'rwaight') &&
    #  (github.event_name=='release' && github.event.action=='published')
    env:
      VERBOSE: ${{ inputs.debug_output || 'true' }}
    steps:
      - name: Checkout files from commit tree
        # Verified creator: https://github.com/marketplace/actions/checkout
        # GitHub Action for checking out a repo
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3

      - name: Get release version
        id: get-release-version
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          ##
          RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
          if [[ $VERSION =~ $RE ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
          else
            echo "::error::Version '$VERSION' is not in a valid format"
            exit 1
          fi
          ##
          if [[ "$PRERELEASE" ]]; then pre=true; else pre=false; fi
          if [[ -f $GITHUB_OUTPUT ]]; then
            echo "major-ref=v$MAJOR" >> $GITHUB_OUTPUT
            echo "minor-ref=v$MINOR" >> $GITHUB_OUTPUT
            echo "is-prerelease=$pre" >> $GITHUB_OUTPUT
          else
            echo "::set-output name=major-ref::v$MAJOR"
            echo "::set-output name=minor-ref::v$MINOR"
            echo "::set-output name=is-prerelease::$pre"
          fi

      - name: Check output from get-release-version
        id: check-get-release-version
        env:
          MAJOR_REF: ${{ steps.get-release-version.outputs.major-ref }}
          MINOR_REF: ${{ steps.get-release-version.outputs.minor-ref }}
          RELEASE_VERSION: ${GITHUB_REF#refs/*/}
        run: |
          echo "## RELEASE_VERSION variables"
          echo ${{ env.RELEASE_VERSION }}
          echo $RELEASE_VERSION
          echo ${{ steps.release-vars-output.outputs.RELEASE_VERSION }}
          echo ""
          echo "## MY_REF variables"
          echo ${{ env.MY_REF }}
          echo $MY_REF
          echo ${{ steps.release-vars-output.outputs.MY_REF }}
          echo ""

      - name: Set MY_REF and RELEASE_VERSION environmental variable and output
        id: release-vars-output
        run: |
          echo "MY_REF=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "MY_REF=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Check output of MY_REF and RELEASE_VERSION
        env:
          MY_REF: ${{ steps.release-vars-output.outputs.MY_REF }}
          RELEASE_VERSION: ${{ steps.release-vars-output.outputs.RELEASE_VERSION }}
        run: |
          echo "## RELEASE_VERSION variables"
          echo ${{ env.RELEASE_VERSION }}
          echo $RELEASE_VERSION
          echo ${{ steps.release-vars-output.outputs.RELEASE_VERSION }}
          echo ""
          echo "## MY_REF variables"
          echo ${{ env.MY_REF }}
          echo $MY_REF
          echo ${{ steps.release-vars-output.outputs.MY_REF }}
          echo ""

      - name: This should run when there are tags pushed
        if: github.ref_type == 'tag'
        run: |
          echo "The ref_type is: ${{ github.ref_type }}"
          echo "The release.tag_name value is ${{ github.event.release.tag_name }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub ref_name: ${{ github.ref_name }}"
          echo "GitHub ref_type: ${{ github.ref_type }}"

      - name: This should run when a release is published
        if: ${{ github.event.release.tag_name }}
        run: |
          echo "The ref_type is: ${{ github.ref_type }}"
          echo "The release.tag_name value is ${{ github.event.release.tag_name }}"

      - name: Run workflow debug
        id: run-workflow-debug
        if: env.VERBOSE=='true'
        run: |
          echo "workflow debug was set to true... you should probably put something here for debug purposes. "
          echo ""
          echo "The GitHub event_name is: ${{ github.event_name }}"
          echo "The GitHub ref is: ${{ github.ref }}"
          echo "The GitHub ref_name is: ${{ github.ref_name }}"
          echo ""
          echo "For more information, see the GitHub Actions Contexts docs, which are located at: "
          echo "https://docs.github.com/en/actions/learn-github-actions/contexts#github-context"
          echo "The 'run-workflow-debug' step is now complete. "
        continue-on-error: true

      - name: Prerelease notice
        if: fromJSON(steps.get-release-version.outputs.is-prerelease)
        run: |
          echo "::notice::Pre-release version detected, not moving ref  ${{ steps.get-release-version.outputs.major-ref }}"

      # - name: Update major and minor release tags for ${{ steps.release-vars-output.outputs.RELEASE_VERSION }}
      #   id: release-tag-updater
      #   #uses: rwaight/actions/releases/release-tag-updater@v1 # can use version specific or main
      #   uses: rwaight/actions/releases/release-tag-updater@main # can use version specific or main
      #   with:
      #     tag: ${{ steps.release-vars-output.outputs.RELEASE_VERSION }}
      #     prefix-regex: 'v?'
      #     fail-on-non-semver-tag: true # default is false
      #     update-major: true
      #     update-minor: true
      #     skip-repo-setup: true # default is false
      #     create-release: false # default is true
      #   #if: (github.ref_type == 'tag' && github.event.release.prerelease == false)
      #   if: github.event.release.prerelease == false


  always-run:
    runs-on: ubuntu-latest
    steps:
      - name: Verbose | Output the GitHub context
        id: verbose-print-context
        run: | 
          ## Print the GitHub context
          ## the double number signs below are for line spacing and readability only
          ##
          echo "starting the 'verbose-print-context' step. "
          echo ""
          echo "::group::GitHub context"
          echo "## GitHub context"
          echo "$GITHUB_CONTEXT"
          echo "\n"
          echo "::endgroup::"
          echo ""
          echo "completing the 'verbose-print-context' step. "
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
